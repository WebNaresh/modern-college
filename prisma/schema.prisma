datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Student Related Info

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  password          String?
  religion          String             @default("") //add
  caste             String             @default("") //add
  temporaryAddress  String             @default("") //add
  permanentAddress  String             @default("") //add
  gender            Gender?
  role              RelationType       @default(Student)
  personalInfo      PersonalInfo?
  familyDetail      FamilyDetail[]     @relation("FamilyDetails")
  previousAcademics PreviousAcademic[] @relation("previousAcademics")
}

model PreviousAcademic {
  id              String @id @default(cuid())
  boardUniversity String
  collegeName     String
  courseName      String
  passingYear     String
  percentage      String
  user            User   @relation("previousAcademics", fields: [userId], references: [id])
  userId          String
}

model FamilyDetail {
  id           String @id @unique @default(cuid())
  name         String
  relationName String
  occupation   String
  address      String
  contact      String
  userId       String
  user         User   @relation("FamilyDetails", fields: [userId], references: [id])
}

enum RelationType {
  Student
  Teacher
  Admin
}

model PersonalInfo {
  id                      String                   @id @default(cuid())
  dateOfBirth             DateTime
  mobile1                 String                   @default("")
  bloodGroup              String                   @default("") //add
  user                    User                     @relation(fields: [userId], references: [id])
  userId                  String                   @unique // Add the unique constraint here
  city                    String                   @default("")
  state                   String                   @default("")
  pincode                 String                   @default("")
  subjectOfTeaching       String                   @default("")
  employmentStatus        Boolean
  workHistory             WorkHistory[] //add
  professionalAchievement ProffesionalAchevement[] //add
}

model WorkHistory {
  id             String        @id @default(cuid())
  jobRole        String
  subjectTeach   String
  serviceYear    Int
  PersonalInfo   PersonalInfo? @relation(fields: [personalInfoId], references: [id])
  personalInfoId String?
}

model ProffesionalAchevement {
  id             String        @id @default(cuid())
  awardName      String
  whereYouGot    String
  aboutAward     String
  PersonalInfo   PersonalInfo? @relation(fields: [personalInfoId], references: [id])
  personalInfoId String?
}

enum Gender {
  Male
  Female
  Other
}

// Admin related Object

model Academic {
  id            String  @id @default(cuid())
  admissionYear Int
  courseId      String?
}

model Course {
  id         String    @id @default(cuid())
  courseName String
  totalFee   Int
  Subjects   Subject[]
  createAt   DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  String?
}

model Subject {
  id          String  @id @default(cuid())
  subjectName String
  totalMark   Int
  Course      Course? @relation(fields: [courseId], references: [id])
  courseId    String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
